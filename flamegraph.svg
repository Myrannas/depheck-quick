<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="618" onload="init(evt)" viewBox="0 0 1200 618" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="618" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="607.00"> </text><svg id="frames" x="10" width="1180" total_samples="736"><g><title>depster`main (1 samples, 0.14%)</title><rect x="0.0000%" y="84" width="0.1359%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="94.50"></text></g><g><title>depster`0x1071a3008 (1 samples, 0.14%)</title><rect x="0.1359%" y="180" width="0.1359%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3859%" y="190.50"></text></g><g><title>libdyld.dylib`dyld_stub_binder (1 samples, 0.14%)</title><rect x="0.1359%" y="196" width="0.1359%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3859%" y="206.50"></text></g><g><title>dyld`dyld::fastBindLazySymbol (1 samples, 0.14%)</title><rect x="0.1359%" y="212" width="0.1359%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3859%" y="222.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::doBindFastLazySymbol(unsigned int, ImageLoader::LinkContext const&amp;, void (*)(), void (*) (1 samples, 0.14%)</title><rect x="0.1359%" y="228" width="0.1359%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3859%" y="238.50"></text></g><g><title>dyld`ImageLoaderMachOCompressed::segmentCommandOffsets (1 samples, 0.14%)</title><rect x="0.1359%" y="244" width="0.1359%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3859%" y="254.50"></text></g><g><title>depster`clap::app::parser::Parser::create_help_and_version (1 samples, 0.14%)</title><rect x="0.2717%" y="212" width="0.1359%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.5217%" y="222.50"></text></g><g><title>depster`clap::app::App::get_matches (2 samples, 0.27%)</title><rect x="0.2717%" y="180" width="0.2717%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="2"/><text x="0.5217%" y="190.50"></text></g><g><title>depster`clap::app::App::get_matches_from_safe_borrow (2 samples, 0.27%)</title><rect x="0.2717%" y="196" width="0.2717%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="2"/><text x="0.5217%" y="206.50"></text></g><g><title>depster`clap::app::parser::Parser::get_matches_with (1 samples, 0.14%)</title><rect x="0.4076%" y="212" width="0.1359%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="0.6576%" y="222.50"></text></g><g><title>depster`clap::app::validator::Validator::validate (1 samples, 0.14%)</title><rect x="0.4076%" y="228" width="0.1359%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.6576%" y="238.50"></text></g><g><title>depster`clap::app::usage::create_usage_with_title (1 samples, 0.14%)</title><rect x="0.4076%" y="244" width="0.1359%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.6576%" y="254.50"></text></g><g><title>depster`clap::app::usage::create_usage_no_title (1 samples, 0.14%)</title><rect x="0.4076%" y="260" width="0.1359%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.6576%" y="270.50"></text></g><g><title>depster`clap::app::usage::create_help_usage (1 samples, 0.14%)</title><rect x="0.4076%" y="276" width="0.1359%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.6576%" y="286.50"></text></g><g><title>depster`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="0.4076%" y="292" width="0.1359%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.6576%" y="302.50"></text></g><g><title>depster`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.14%)</title><rect x="0.5435%" y="196" width="0.1359%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="0.7935%" y="206.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="0.5435%" y="212" width="0.1359%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="0.7935%" y="222.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="0.5435%" y="228" width="0.1359%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.7935%" y="238.50"></text></g><g><title>depster`rayon::iter::extend::_&lt;impl rayon::iter::ParallelExtend&lt;T&gt; for std::collections::hash::set::HashSet&lt;T,S&gt;&gt;::par_extend (2 samples, 0.27%)</title><rect x="0.5435%" y="180" width="0.2717%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="2"/><text x="0.7935%" y="190.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (1 samples, 0.14%)</title><rect x="0.6793%" y="196" width="0.1359%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.9293%" y="206.50"></text></g><g><title>depster`0x5 (7 samples, 0.95%)</title><rect x="0.0000%" y="68" width="0.9511%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="78.50"></text></g><g><title>libdyld.dylib`start (6 samples, 0.82%)</title><rect x="0.1359%" y="84" width="0.8152%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="6"/><text x="0.3859%" y="94.50"></text></g><g><title>depster`main (6 samples, 0.82%)</title><rect x="0.1359%" y="100" width="0.8152%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="6"/><text x="0.3859%" y="110.50"></text></g><g><title>depster`std::rt::lang_start_internal (6 samples, 0.82%)</title><rect x="0.1359%" y="116" width="0.8152%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="6"/><text x="0.3859%" y="126.50"></text></g><g><title>depster`std::rt::lang_start::_{{closure}} (6 samples, 0.82%)</title><rect x="0.1359%" y="132" width="0.8152%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="6"/><text x="0.3859%" y="142.50"></text></g><g><title>depster`std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.82%)</title><rect x="0.1359%" y="148" width="0.8152%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="6"/><text x="0.3859%" y="158.50"></text></g><g><title>depster`depster::main (6 samples, 0.82%)</title><rect x="0.1359%" y="164" width="0.8152%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="6"/><text x="0.3859%" y="174.50"></text></g><g><title>depster`regex::re_unicode::Regex::new (1 samples, 0.14%)</title><rect x="0.8152%" y="180" width="0.1359%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="1.0652%" y="190.50"></text></g><g><title>depster`regex::exec::ExecBuilder::build (1 samples, 0.14%)</title><rect x="0.8152%" y="196" width="0.1359%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="1.0652%" y="206.50"></text></g><g><title>depster`regex::literal::imp::LiteralSearcher::prefixes (1 samples, 0.14%)</title><rect x="0.8152%" y="212" width="0.1359%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="1.0652%" y="222.50"></text></g><g><title>depster`regex::literal::imp::Matcher::new (1 samples, 0.14%)</title><rect x="0.8152%" y="228" width="0.1359%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="1.0652%" y="238.50"></text></g><g><title>depster`aho_corasick::nfa::Builder::build (1 samples, 0.14%)</title><rect x="0.8152%" y="244" width="0.1359%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="1.0652%" y="254.50"></text></g><g><title>depster`aho_corasick::classes::ByteClasses::singletons (1 samples, 0.14%)</title><rect x="0.8152%" y="260" width="0.1359%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="1"/><text x="1.0652%" y="270.50"></text></g><g><title>depster`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.41%)</title><rect x="0.9511%" y="404" width="0.4076%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="3"/><text x="1.2011%" y="414.50"></text></g><g><title>depster`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.41%)</title><rect x="0.9511%" y="420" width="0.4076%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="3"/><text x="1.2011%" y="430.50"></text></g><g><title>depster`&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.41%)</title><rect x="0.9511%" y="436" width="0.4076%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="3"/><text x="1.2011%" y="446.50"></text></g><g><title>libsystem_c.dylib`readdir_r$INODE64 (3 samples, 0.41%)</title><rect x="0.9511%" y="452" width="0.4076%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="3"/><text x="1.2011%" y="462.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (3 samples, 0.41%)</title><rect x="0.9511%" y="468" width="0.4076%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="3"/><text x="1.2011%" y="478.50"></text></g><g><title>depster`&lt;rayon_core::job::HeapJob&lt;BODY&gt; as rayon_core::job::Job&gt;::execute (4 samples, 0.54%)</title><rect x="0.9511%" y="196" width="0.5435%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="4"/><text x="1.2011%" y="206.50"></text></g><g><title>depster`rayon::iter::from_par_iter::_&lt;impl rayon::iter::FromParallelIterator&lt;()&gt; for ()&gt;::from_par_iter (4 samples, 0.54%)</title><rect x="0.9511%" y="212" width="0.5435%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="4"/><text x="1.2011%" y="222.50"></text></g><g><title>depster`&lt;jwalk::core::jwalk_par_bridge::JWalkIterBridge&lt;Iter&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (4 samples, 0.54%)</title><rect x="0.9511%" y="228" width="0.5435%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="4"/><text x="1.2011%" y="238.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (4 samples, 0.54%)</title><rect x="0.9511%" y="244" width="0.5435%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="4"/><text x="1.2011%" y="254.50"></text></g><g><title>depster`rayon_core::registry::in_worker (4 samples, 0.54%)</title><rect x="0.9511%" y="260" width="0.5435%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="4"/><text x="1.2011%" y="270.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (4 samples, 0.54%)</title><rect x="0.9511%" y="276" width="0.5435%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="4"/><text x="1.2011%" y="286.50"></text></g><g><title>depster`rayon_core::registry::in_worker (4 samples, 0.54%)</title><rect x="0.9511%" y="292" width="0.5435%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="4"/><text x="1.2011%" y="302.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (4 samples, 0.54%)</title><rect x="0.9511%" y="308" width="0.5435%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="4"/><text x="1.2011%" y="318.50"></text></g><g><title>depster`rayon_core::registry::in_worker (4 samples, 0.54%)</title><rect x="0.9511%" y="324" width="0.5435%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="4"/><text x="1.2011%" y="334.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (4 samples, 0.54%)</title><rect x="0.9511%" y="340" width="0.5435%" height="15" fill="rgb(250,191,14)" fg:x="7" fg:w="4"/><text x="1.2011%" y="350.50"></text></g><g><title>depster`&lt;jwalk::core::jwalk_par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (4 samples, 0.54%)</title><rect x="0.9511%" y="356" width="0.5435%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="4"/><text x="1.2011%" y="366.50"></text></g><g><title>depster`jwalk::core::read_dir_iter::multi_threaded_walk_dir (4 samples, 0.54%)</title><rect x="0.9511%" y="372" width="0.5435%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="4"/><text x="1.2011%" y="382.50"></text></g><g><title>depster`&lt;jwalk::WalkDirGeneric&lt;C&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter::_{{closure}} (4 samples, 0.54%)</title><rect x="0.9511%" y="388" width="0.5435%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="4"/><text x="1.2011%" y="398.50"></text></g><g><title>depster`std::sys::unix::fs::readdir (1 samples, 0.14%)</title><rect x="1.3587%" y="404" width="0.1359%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="1.6087%" y="414.50"></text></g><g><title>libsystem_c.dylib`__opendir2$INODE64 (1 samples, 0.14%)</title><rect x="1.3587%" y="420" width="0.1359%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="1"/><text x="1.6087%" y="430.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$fstatfs$INODE64 (1 samples, 0.14%)</title><rect x="1.3587%" y="436" width="0.1359%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="1"/><text x="1.6087%" y="446.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (7 samples, 0.95%)</title><rect x="1.6304%" y="340" width="0.9511%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="7"/><text x="1.8804%" y="350.50"></text></g><g><title>depster`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.22%)</title><rect x="1.4946%" y="292" width="1.2228%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="9"/><text x="1.7446%" y="302.50"></text></g><g><title>depster`&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.22%)</title><rect x="1.4946%" y="308" width="1.2228%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="9"/><text x="1.7446%" y="318.50"></text></g><g><title>libsystem_c.dylib`readdir_r$INODE64 (8 samples, 1.09%)</title><rect x="1.6304%" y="324" width="1.0870%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="8"/><text x="1.8804%" y="334.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.14%)</title><rect x="2.5815%" y="340" width="0.1359%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="2.8315%" y="350.50"></text></g><g><title>depster`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 1.36%)</title><rect x="1.4946%" y="276" width="1.3587%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="10"/><text x="1.7446%" y="286.50"></text></g><g><title>depster`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.14%)</title><rect x="2.7174%" y="292" width="0.1359%" height="15" fill="rgb(248,47,43)" fg:x="20" fg:w="1"/><text x="2.9674%" y="302.50"></text></g><g><title>depster`std::path::Path::_join (1 samples, 0.14%)</title><rect x="2.7174%" y="308" width="0.1359%" height="15" fill="rgb(221,10,30)" fg:x="20" fg:w="1"/><text x="2.9674%" y="318.50"></text></g><g><title>depster`&lt;jwalk::core::jwalk_par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (13 samples, 1.77%)</title><rect x="1.4946%" y="228" width="1.7663%" height="15" fill="rgb(210,229,1)" fg:x="11" fg:w="13"/><text x="1.7446%" y="238.50"></text></g><g><title>depster`jwalk::core::read_dir_iter::multi_threaded_walk_dir (13 samples, 1.77%)</title><rect x="1.4946%" y="244" width="1.7663%" height="15" fill="rgb(222,148,37)" fg:x="11" fg:w="13"/><text x="1.7446%" y="254.50"></text></g><g><title>depster`&lt;jwalk::WalkDirGeneric&lt;C&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter::_{{closure}} (13 samples, 1.77%)</title><rect x="1.4946%" y="260" width="1.7663%" height="15" fill="rgb(234,67,33)" fg:x="11" fg:w="13"/><text x="1.7446%" y="270.50"></text></g><g><title>depster`std::sys::unix::fs::readdir (3 samples, 0.41%)</title><rect x="2.8533%" y="276" width="0.4076%" height="15" fill="rgb(247,98,35)" fg:x="21" fg:w="3"/><text x="3.1033%" y="286.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (3 samples, 0.41%)</title><rect x="2.8533%" y="292" width="0.4076%" height="15" fill="rgb(247,138,52)" fg:x="21" fg:w="3"/><text x="3.1033%" y="302.50"></text></g><g><title>libsystem_c.dylib`_readdir_unlocked$INODE64 (1 samples, 0.14%)</title><rect x="3.2609%" y="372" width="0.1359%" height="15" fill="rgb(213,79,30)" fg:x="24" fg:w="1"/><text x="3.5109%" y="382.50"></text></g><g><title>depster`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.54%)</title><rect x="3.2609%" y="324" width="0.5435%" height="15" fill="rgb(246,177,23)" fg:x="24" fg:w="4"/><text x="3.5109%" y="334.50"></text></g><g><title>depster`&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.54%)</title><rect x="3.2609%" y="340" width="0.5435%" height="15" fill="rgb(230,62,27)" fg:x="24" fg:w="4"/><text x="3.5109%" y="350.50"></text></g><g><title>libsystem_c.dylib`readdir_r$INODE64 (4 samples, 0.54%)</title><rect x="3.2609%" y="356" width="0.5435%" height="15" fill="rgb(216,154,8)" fg:x="24" fg:w="4"/><text x="3.5109%" y="366.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (3 samples, 0.41%)</title><rect x="3.3967%" y="372" width="0.4076%" height="15" fill="rgb(244,35,45)" fg:x="25" fg:w="3"/><text x="3.6467%" y="382.50"></text></g><g><title>depster`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.68%)</title><rect x="3.2609%" y="308" width="0.6793%" height="15" fill="rgb(251,115,12)" fg:x="24" fg:w="5"/><text x="3.5109%" y="318.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (1 samples, 0.14%)</title><rect x="3.8043%" y="324" width="0.1359%" height="15" fill="rgb(240,54,50)" fg:x="28" fg:w="1"/><text x="4.0543%" y="334.50"></text></g><g><title>depster`&lt;jwalk::WalkDirGeneric&lt;C&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter::_{{closure}} (7 samples, 0.95%)</title><rect x="3.2609%" y="292" width="0.9511%" height="15" fill="rgb(233,84,52)" fg:x="24" fg:w="7"/><text x="3.5109%" y="302.50"></text></g><g><title>depster`std::sys::unix::fs::readdir (2 samples, 0.27%)</title><rect x="3.9402%" y="308" width="0.2717%" height="15" fill="rgb(207,117,47)" fg:x="29" fg:w="2"/><text x="4.1902%" y="318.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (2 samples, 0.27%)</title><rect x="3.9402%" y="324" width="0.2717%" height="15" fill="rgb(249,43,39)" fg:x="29" fg:w="2"/><text x="4.1902%" y="334.50"></text></g><g><title>depster`jwalk::core::read_dir_iter::multi_threaded_walk_dir (8 samples, 1.09%)</title><rect x="3.2609%" y="276" width="1.0870%" height="15" fill="rgb(209,38,44)" fg:x="24" fg:w="8"/><text x="3.5109%" y="286.50"></text></g><g><title>depster`crossbeam_channel::channel::Sender&lt;T&gt;::send (1 samples, 0.14%)</title><rect x="4.2120%" y="292" width="0.1359%" height="15" fill="rgb(236,212,23)" fg:x="31" fg:w="1"/><text x="4.4620%" y="302.50"></text></g><g><title>depster`crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (1 samples, 0.14%)</title><rect x="4.2120%" y="308" width="0.1359%" height="15" fill="rgb(242,79,21)" fg:x="31" fg:w="1"/><text x="4.4620%" y="318.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (22 samples, 2.99%)</title><rect x="1.4946%" y="212" width="2.9891%" height="15" fill="rgb(211,96,35)" fg:x="11" fg:w="22"/><text x="1.7446%" y="222.50">dep..</text></g><g><title>depster`rayon_core::registry::in_worker (9 samples, 1.22%)</title><rect x="3.2609%" y="228" width="1.2228%" height="15" fill="rgb(253,215,40)" fg:x="24" fg:w="9"/><text x="3.5109%" y="238.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (9 samples, 1.22%)</title><rect x="3.2609%" y="244" width="1.2228%" height="15" fill="rgb(211,81,21)" fg:x="24" fg:w="9"/><text x="3.5109%" y="254.50"></text></g><g><title>depster`&lt;jwalk::core::jwalk_par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (9 samples, 1.22%)</title><rect x="3.2609%" y="260" width="1.2228%" height="15" fill="rgb(208,190,38)" fg:x="24" fg:w="9"/><text x="3.5109%" y="270.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.14%)</title><rect x="4.3478%" y="276" width="0.1359%" height="15" fill="rgb(235,213,38)" fg:x="32" fg:w="1"/><text x="4.5978%" y="286.50"></text></g><g><title>depster`&lt;jwalk::core::dir_entry_iter::DirEntryIter&lt;C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="4.4837%" y="436" width="0.1359%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="1"/><text x="4.7337%" y="446.50"></text></g><g><title>depster`&lt;jwalk::core::read_dir_iter::ReadDirIter&lt;C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="4.4837%" y="452" width="0.1359%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="1"/><text x="4.7337%" y="462.50"></text></g><g><title>depster`&lt;jwalk::core::ordered_queue::OrderedQueueIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="4.4837%" y="468" width="0.1359%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="1"/><text x="4.7337%" y="478.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.14%)</title><rect x="4.4837%" y="484" width="0.1359%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="1"/><text x="4.7337%" y="494.50"></text></g><g><title>depster`&lt;core::str::lossy::Utf8Lossy as core::fmt::Display&gt;::fmt (1 samples, 0.14%)</title><rect x="21.6033%" y="452" width="0.1359%" height="15" fill="rgb(235,124,12)" fg:x="159" fg:w="1"/><text x="21.8533%" y="462.50"></text></g><g><title>depster`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.14%)</title><rect x="21.6033%" y="468" width="0.1359%" height="15" fill="rgb(224,169,11)" fg:x="159" fg:w="1"/><text x="21.8533%" y="478.50"></text></g><g><title>depster`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.14%)</title><rect x="21.6033%" y="484" width="0.1359%" height="15" fill="rgb(250,166,2)" fg:x="159" fg:w="1"/><text x="21.8533%" y="494.50"></text></g><g><title>depster`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="21.6033%" y="500" width="0.1359%" height="15" fill="rgb(242,216,29)" fg:x="159" fg:w="1"/><text x="21.8533%" y="510.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.14%)</title><rect x="21.6033%" y="516" width="0.1359%" height="15" fill="rgb(230,116,27)" fg:x="159" fg:w="1"/><text x="21.8533%" y="526.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.14%)</title><rect x="21.6033%" y="532" width="0.1359%" height="15" fill="rgb(228,99,48)" fg:x="159" fg:w="1"/><text x="21.8533%" y="542.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="21.6033%" y="548" width="0.1359%" height="15" fill="rgb(253,11,6)" fg:x="159" fg:w="1"/><text x="21.8533%" y="558.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="21.6033%" y="564" width="0.1359%" height="15" fill="rgb(247,143,39)" fg:x="159" fg:w="1"/><text x="21.8533%" y="574.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.14%)</title><rect x="21.6033%" y="580" width="0.1359%" height="15" fill="rgb(236,97,10)" fg:x="159" fg:w="1"/><text x="21.8533%" y="590.50"></text></g><g><title>depster`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="21.7391%" y="452" width="0.1359%" height="15" fill="rgb(233,208,19)" fg:x="160" fg:w="1"/><text x="21.9891%" y="462.50"></text></g><g><title>depster`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.41%)</title><rect x="21.8750%" y="452" width="0.4076%" height="15" fill="rgb(216,164,2)" fg:x="161" fg:w="3"/><text x="22.1250%" y="462.50"></text></g><g><title>depster`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.27%)</title><rect x="22.0109%" y="468" width="0.2717%" height="15" fill="rgb(220,129,5)" fg:x="162" fg:w="2"/><text x="22.2609%" y="478.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.27%)</title><rect x="22.0109%" y="484" width="0.2717%" height="15" fill="rgb(242,17,10)" fg:x="162" fg:w="2"/><text x="22.2609%" y="494.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.27%)</title><rect x="22.0109%" y="500" width="0.2717%" height="15" fill="rgb(242,107,0)" fg:x="162" fg:w="2"/><text x="22.2609%" y="510.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.27%)</title><rect x="22.0109%" y="516" width="0.2717%" height="15" fill="rgb(251,28,31)" fg:x="162" fg:w="2"/><text x="22.2609%" y="526.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="22.1467%" y="532" width="0.1359%" height="15" fill="rgb(233,223,10)" fg:x="163" fg:w="1"/><text x="22.3967%" y="542.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="22.1467%" y="548" width="0.1359%" height="15" fill="rgb(215,21,27)" fg:x="163" fg:w="1"/><text x="22.3967%" y="558.50"></text></g><g><title>depster`core::str::pattern::StrSearcher::new (4 samples, 0.54%)</title><rect x="22.2826%" y="452" width="0.5435%" height="15" fill="rgb(232,23,21)" fg:x="164" fg:w="4"/><text x="22.5326%" y="462.50"></text></g><g><title>depster`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.14%)</title><rect x="22.8261%" y="452" width="0.1359%" height="15" fill="rgb(244,5,23)" fg:x="168" fg:w="1"/><text x="23.0761%" y="462.50"></text></g><g><title>depster`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.14%)</title><rect x="22.8261%" y="468" width="0.1359%" height="15" fill="rgb(226,81,46)" fg:x="168" fg:w="1"/><text x="23.0761%" y="478.50"></text></g><g><title>depster`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.14%)</title><rect x="22.9620%" y="484" width="0.1359%" height="15" fill="rgb(247,70,30)" fg:x="169" fg:w="1"/><text x="23.2120%" y="494.50"></text></g><g><title>depster`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="22.9620%" y="500" width="0.1359%" height="15" fill="rgb(212,68,19)" fg:x="169" fg:w="1"/><text x="23.2120%" y="510.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.14%)</title><rect x="22.9620%" y="516" width="0.1359%" height="15" fill="rgb(240,187,13)" fg:x="169" fg:w="1"/><text x="23.2120%" y="526.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.14%)</title><rect x="22.9620%" y="532" width="0.1359%" height="15" fill="rgb(223,113,26)" fg:x="169" fg:w="1"/><text x="23.2120%" y="542.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="22.9620%" y="548" width="0.1359%" height="15" fill="rgb(206,192,2)" fg:x="169" fg:w="1"/><text x="23.2120%" y="558.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.14%)</title><rect x="22.9620%" y="564" width="0.1359%" height="15" fill="rgb(241,108,4)" fg:x="169" fg:w="1"/><text x="23.2120%" y="574.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.14%)</title><rect x="22.9620%" y="580" width="0.1359%" height="15" fill="rgb(247,173,49)" fg:x="169" fg:w="1"/><text x="23.2120%" y="590.50"></text></g><g><title>depster`core::str::converts::from_utf8 (1 samples, 0.14%)</title><rect x="23.0978%" y="484" width="0.1359%" height="15" fill="rgb(224,114,35)" fg:x="170" fg:w="1"/><text x="23.3478%" y="494.50"></text></g><g><title>depster`std::io::default_read_to_end (1 samples, 0.14%)</title><rect x="23.2337%" y="484" width="0.1359%" height="15" fill="rgb(245,159,27)" fg:x="171" fg:w="1"/><text x="23.4837%" y="494.50"></text></g><g><title>libsystem_kernel.dylib`fstat$INODE64 (3 samples, 0.41%)</title><rect x="23.3696%" y="484" width="0.4076%" height="15" fill="rgb(245,172,44)" fg:x="172" fg:w="3"/><text x="23.6196%" y="494.50"></text></g><g><title>depster`&lt;std::fs::File as std::io::Read&gt;::read_to_string (33 samples, 4.48%)</title><rect x="22.9620%" y="468" width="4.4837%" height="15" fill="rgb(236,23,11)" fg:x="169" fg:w="33"/><text x="23.2120%" y="478.50">depst..</text></g><g><title>libsystem_kernel.dylib`read (27 samples, 3.67%)</title><rect x="23.7772%" y="484" width="3.6685%" height="15" fill="rgb(205,117,38)" fg:x="175" fg:w="27"/><text x="24.0272%" y="494.50">libs..</text></g><g><title>depster`std::fs::read_to_string::inner (39 samples, 5.30%)</title><rect x="22.9620%" y="452" width="5.2989%" height="15" fill="rgb(237,72,25)" fg:x="169" fg:w="39"/><text x="23.2120%" y="462.50">depste..</text></g><g><title>depster`std::fs::OpenOptions::_open (6 samples, 0.82%)</title><rect x="27.4457%" y="468" width="0.8152%" height="15" fill="rgb(244,70,9)" fg:x="202" fg:w="6"/><text x="27.6957%" y="478.50"></text></g><g><title>libsystem_kernel.dylib`__open (6 samples, 0.82%)</title><rect x="27.4457%" y="484" width="0.8152%" height="15" fill="rgb(217,125,39)" fg:x="202" fg:w="6"/><text x="27.6957%" y="494.50"></text></g><g><title>depster`std::path::Path::_join (1 samples, 0.14%)</title><rect x="28.2609%" y="452" width="0.1359%" height="15" fill="rgb(235,36,10)" fg:x="208" fg:w="1"/><text x="28.5109%" y="462.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.14%)</title><rect x="28.2609%" y="468" width="0.1359%" height="15" fill="rgb(251,123,47)" fg:x="208" fg:w="1"/><text x="28.5109%" y="478.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.14%)</title><rect x="28.2609%" y="484" width="0.1359%" height="15" fill="rgb(221,13,13)" fg:x="208" fg:w="1"/><text x="28.5109%" y="494.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="28.2609%" y="500" width="0.1359%" height="15" fill="rgb(238,131,9)" fg:x="208" fg:w="1"/><text x="28.5109%" y="510.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (3 samples, 0.41%)</title><rect x="28.3967%" y="452" width="0.4076%" height="15" fill="rgb(211,50,8)" fg:x="209" fg:w="3"/><text x="28.6467%" y="462.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.14%)</title><rect x="28.8043%" y="452" width="0.1359%" height="15" fill="rgb(245,182,24)" fg:x="212" fg:w="1"/><text x="29.0543%" y="462.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.27%)</title><rect x="28.9402%" y="452" width="0.2717%" height="15" fill="rgb(242,14,37)" fg:x="213" fg:w="2"/><text x="29.1902%" y="462.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.14%)</title><rect x="29.0761%" y="468" width="0.1359%" height="15" fill="rgb(246,228,12)" fg:x="214" fg:w="1"/><text x="29.3261%" y="478.50"></text></g><g><title>depster`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (183 samples, 24.86%)</title><rect x="4.4837%" y="228" width="24.8641%" height="15" fill="rgb(213,55,15)" fg:x="33" fg:w="183"/><text x="4.7337%" y="238.50">depster`&lt;core::panic::unwind_safe::Asser..</text></g><g><title>depster`std::panicking::try (183 samples, 24.86%)</title><rect x="4.4837%" y="244" width="24.8641%" height="15" fill="rgb(209,9,3)" fg:x="33" fg:w="183"/><text x="4.7337%" y="254.50">depster`std::panicking::try</text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (183 samples, 24.86%)</title><rect x="4.4837%" y="260" width="24.8641%" height="15" fill="rgb(230,59,30)" fg:x="33" fg:w="183"/><text x="4.7337%" y="270.50">depster`rayon::iter::plumbing::bridge_un..</text></g><g><title>depster`rayon_core::registry::in_worker (183 samples, 24.86%)</title><rect x="4.4837%" y="276" width="24.8641%" height="15" fill="rgb(209,121,21)" fg:x="33" fg:w="183"/><text x="4.7337%" y="286.50">depster`rayon_core::registry::in_worker</text></g><g><title>depster`std::panicking::try (183 samples, 24.86%)</title><rect x="4.4837%" y="292" width="24.8641%" height="15" fill="rgb(220,109,13)" fg:x="33" fg:w="183"/><text x="4.7337%" y="302.50">depster`std::panicking::try</text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (183 samples, 24.86%)</title><rect x="4.4837%" y="308" width="24.8641%" height="15" fill="rgb(232,18,1)" fg:x="33" fg:w="183"/><text x="4.7337%" y="318.50">depster`rayon::iter::plumbing::bridge_un..</text></g><g><title>depster`rayon_core::registry::in_worker (183 samples, 24.86%)</title><rect x="4.4837%" y="324" width="24.8641%" height="15" fill="rgb(215,41,42)" fg:x="33" fg:w="183"/><text x="4.7337%" y="334.50">depster`rayon_core::registry::in_worker</text></g><g><title>depster`std::panicking::try (183 samples, 24.86%)</title><rect x="4.4837%" y="340" width="24.8641%" height="15" fill="rgb(224,123,36)" fg:x="33" fg:w="183"/><text x="4.7337%" y="350.50">depster`std::panicking::try</text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (183 samples, 24.86%)</title><rect x="4.4837%" y="356" width="24.8641%" height="15" fill="rgb(240,125,3)" fg:x="33" fg:w="183"/><text x="4.7337%" y="366.50">depster`rayon::iter::plumbing::bridge_un..</text></g><g><title>depster`rayon_core::registry::in_worker (183 samples, 24.86%)</title><rect x="4.4837%" y="372" width="24.8641%" height="15" fill="rgb(205,98,50)" fg:x="33" fg:w="183"/><text x="4.7337%" y="382.50">depster`rayon_core::registry::in_worker</text></g><g><title>depster`std::panicking::try (183 samples, 24.86%)</title><rect x="4.4837%" y="388" width="24.8641%" height="15" fill="rgb(205,185,37)" fg:x="33" fg:w="183"/><text x="4.7337%" y="398.50">depster`std::panicking::try</text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (183 samples, 24.86%)</title><rect x="4.4837%" y="404" width="24.8641%" height="15" fill="rgb(238,207,15)" fg:x="33" fg:w="183"/><text x="4.7337%" y="414.50">depster`rayon::iter::plumbing::bridge_un..</text></g><g><title>depster`&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (183 samples, 24.86%)</title><rect x="4.4837%" y="420" width="24.8641%" height="15" fill="rgb(213,199,42)" fg:x="33" fg:w="183"/><text x="4.7337%" y="430.50">depster`&lt;rayon::iter::par_bridge::IterPa..</text></g><g><title>depster`&lt;rayon::iter::filter_map::FilterMapFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (182 samples, 24.73%)</title><rect x="4.6196%" y="436" width="24.7283%" height="15" fill="rgb(235,201,11)" fg:x="34" fg:w="182"/><text x="4.8696%" y="446.50">depster`&lt;rayon::iter::filter_map::Filte..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="29.2120%" y="452" width="0.1359%" height="15" fill="rgb(207,46,11)" fg:x="215" fg:w="1"/><text x="29.4620%" y="462.50"></text></g><g><title>depster`&lt;jwalk::core::read_dir_iter::ReadDirIter&lt;C&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="29.4837%" y="276" width="0.1359%" height="15" fill="rgb(241,35,35)" fg:x="217" fg:w="1"/><text x="29.7337%" y="286.50"></text></g><g><title>depster`&lt;jwalk::core::ordered_queue::OrderedQueueIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="29.4837%" y="292" width="0.1359%" height="15" fill="rgb(243,32,47)" fg:x="217" fg:w="1"/><text x="29.7337%" y="302.50"></text></g><g><title>depster`&lt;jwalk::core::dir_entry_iter::DirEntryIter&lt;C&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.27%)</title><rect x="29.4837%" y="260" width="0.2717%" height="15" fill="rgb(247,202,23)" fg:x="217" fg:w="2"/><text x="29.7337%" y="270.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.14%)</title><rect x="29.6196%" y="276" width="0.1359%" height="15" fill="rgb(219,102,11)" fg:x="218" fg:w="1"/><text x="29.8696%" y="286.50"></text></g><g><title>depster`&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.27%)</title><rect x="79.8913%" y="276" width="0.2717%" height="15" fill="rgb(243,110,44)" fg:x="588" fg:w="2"/><text x="80.1413%" y="286.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.14%)</title><rect x="80.5707%" y="372" width="0.1359%" height="15" fill="rgb(222,74,54)" fg:x="593" fg:w="1"/><text x="80.8207%" y="382.50"></text></g><g><title>depster`&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.68%)</title><rect x="80.1630%" y="292" width="0.6793%" height="15" fill="rgb(216,99,12)" fg:x="590" fg:w="5"/><text x="80.4130%" y="302.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.68%)</title><rect x="80.1630%" y="308" width="0.6793%" height="15" fill="rgb(226,22,26)" fg:x="590" fg:w="5"/><text x="80.4130%" y="318.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.68%)</title><rect x="80.1630%" y="324" width="0.6793%" height="15" fill="rgb(217,163,10)" fg:x="590" fg:w="5"/><text x="80.4130%" y="334.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.68%)</title><rect x="80.1630%" y="340" width="0.6793%" height="15" fill="rgb(213,25,53)" fg:x="590" fg:w="5"/><text x="80.4130%" y="350.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.68%)</title><rect x="80.1630%" y="356" width="0.6793%" height="15" fill="rgb(252,105,26)" fg:x="590" fg:w="5"/><text x="80.4130%" y="366.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="80.7065%" y="372" width="0.1359%" height="15" fill="rgb(220,39,43)" fg:x="594" fg:w="1"/><text x="80.9565%" y="382.50"></text></g><g><title>depster`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.82%)</title><rect x="80.1630%" y="276" width="0.8152%" height="15" fill="rgb(229,68,48)" fg:x="590" fg:w="6"/><text x="80.4130%" y="286.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.14%)</title><rect x="80.8424%" y="292" width="0.1359%" height="15" fill="rgb(252,8,32)" fg:x="595" fg:w="1"/><text x="81.0924%" y="302.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.14%)</title><rect x="80.8424%" y="308" width="0.1359%" height="15" fill="rgb(223,20,43)" fg:x="595" fg:w="1"/><text x="81.0924%" y="318.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="80.8424%" y="324" width="0.1359%" height="15" fill="rgb(229,81,49)" fg:x="595" fg:w="1"/><text x="81.0924%" y="334.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.14%)</title><rect x="80.8424%" y="340" width="0.1359%" height="15" fill="rgb(236,28,36)" fg:x="595" fg:w="1"/><text x="81.0924%" y="350.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.14%)</title><rect x="80.8424%" y="356" width="0.1359%" height="15" fill="rgb(249,185,26)" fg:x="595" fg:w="1"/><text x="81.0924%" y="366.50"></text></g><g><title>depster`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.14%)</title><rect x="80.9783%" y="372" width="0.1359%" height="15" fill="rgb(249,174,33)" fg:x="596" fg:w="1"/><text x="81.2283%" y="382.50"></text></g><g><title>depster`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.14%)</title><rect x="80.9783%" y="388" width="0.1359%" height="15" fill="rgb(233,201,37)" fg:x="596" fg:w="1"/><text x="81.2283%" y="398.50"></text></g><g><title>depster`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="80.9783%" y="404" width="0.1359%" height="15" fill="rgb(221,78,26)" fg:x="596" fg:w="1"/><text x="81.2283%" y="414.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.14%)</title><rect x="80.9783%" y="420" width="0.1359%" height="15" fill="rgb(250,127,30)" fg:x="596" fg:w="1"/><text x="81.2283%" y="430.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.14%)</title><rect x="80.9783%" y="436" width="0.1359%" height="15" fill="rgb(230,49,44)" fg:x="596" fg:w="1"/><text x="81.2283%" y="446.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="80.9783%" y="452" width="0.1359%" height="15" fill="rgb(229,67,23)" fg:x="596" fg:w="1"/><text x="81.2283%" y="462.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="80.9783%" y="468" width="0.1359%" height="15" fill="rgb(249,83,47)" fg:x="596" fg:w="1"/><text x="81.2283%" y="478.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="80.9783%" y="484" width="0.1359%" height="15" fill="rgb(215,43,3)" fg:x="596" fg:w="1"/><text x="81.2283%" y="494.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.27%)</title><rect x="80.9783%" y="308" width="0.2717%" height="15" fill="rgb(238,154,13)" fg:x="596" fg:w="2"/><text x="81.2283%" y="318.50"></text></g><g><title>depster`rayon_core::registry::in_worker (2 samples, 0.27%)</title><rect x="80.9783%" y="324" width="0.2717%" height="15" fill="rgb(219,56,2)" fg:x="596" fg:w="2"/><text x="81.2283%" y="334.50"></text></g><g><title>depster`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (2 samples, 0.27%)</title><rect x="80.9783%" y="340" width="0.2717%" height="15" fill="rgb(233,0,4)" fg:x="596" fg:w="2"/><text x="81.2283%" y="350.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.27%)</title><rect x="80.9783%" y="356" width="0.2717%" height="15" fill="rgb(235,30,7)" fg:x="596" fg:w="2"/><text x="81.2283%" y="366.50"></text></g><g><title>depster`rayon_core::registry::in_worker (1 samples, 0.14%)</title><rect x="81.1141%" y="372" width="0.1359%" height="15" fill="rgb(250,79,13)" fg:x="597" fg:w="1"/><text x="81.3641%" y="382.50"></text></g><g><title>depster`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1 samples, 0.14%)</title><rect x="81.1141%" y="388" width="0.1359%" height="15" fill="rgb(211,146,34)" fg:x="597" fg:w="1"/><text x="81.3641%" y="398.50"></text></g><g><title>depster`rayon::iter::plumbing::bridge_producer_consumer::helper (1 samples, 0.14%)</title><rect x="81.1141%" y="404" width="0.1359%" height="15" fill="rgb(228,22,38)" fg:x="597" fg:w="1"/><text x="81.3641%" y="414.50"></text></g><g><title>depster`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.14%)</title><rect x="81.1141%" y="420" width="0.1359%" height="15" fill="rgb(235,168,5)" fg:x="597" fg:w="1"/><text x="81.3641%" y="430.50"></text></g><g><title>depster`&lt;rayon::vec::IntoIter&lt;T&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer (3 samples, 0.41%)</title><rect x="80.9783%" y="292" width="0.4076%" height="15" fill="rgb(221,155,16)" fg:x="596" fg:w="3"/><text x="81.2283%" y="302.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="81.2500%" y="308" width="0.1359%" height="15" fill="rgb(215,215,53)" fg:x="598" fg:w="1"/><text x="81.5000%" y="318.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="81.2500%" y="324" width="0.1359%" height="15" fill="rgb(223,4,10)" fg:x="598" fg:w="1"/><text x="81.5000%" y="334.50"></text></g><g><title>depster`&lt;rayon::iter::flatten::FlattenFolder&lt;C,&lt;C as rayon::iter::plumbing::Consumer&lt;&lt;T as rayon::iter::IntoParallelIterator&gt;::Item&gt;&gt;::Result&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (4 samples, 0.54%)</title><rect x="80.9783%" y="276" width="0.5435%" height="15" fill="rgb(234,103,6)" fg:x="596" fg:w="4"/><text x="81.2283%" y="286.50"></text></g><g><title>depster`rayon::math::simplify_range (1 samples, 0.14%)</title><rect x="81.3859%" y="292" width="0.1359%" height="15" fill="rgb(227,97,0)" fg:x="599" fg:w="1"/><text x="81.6359%" y="302.50"></text></g><g><title>depster`&lt;std::path::Display as core::fmt::Display&gt;::fmt (1 samples, 0.14%)</title><rect x="81.5217%" y="276" width="0.1359%" height="15" fill="rgb(234,150,53)" fg:x="600" fg:w="1"/><text x="81.7717%" y="286.50"></text></g><g><title>depster`core::fmt::write (1 samples, 0.14%)</title><rect x="81.6576%" y="276" width="0.1359%" height="15" fill="rgb(228,201,54)" fg:x="601" fg:w="1"/><text x="81.9076%" y="286.50"></text></g><g><title>depster`core::str::pattern::StrSearcher::new (11 samples, 1.49%)</title><rect x="81.7935%" y="276" width="1.4946%" height="15" fill="rgb(222,22,37)" fg:x="602" fg:w="11"/><text x="82.0435%" y="286.50"></text></g><g><title>depster`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.14%)</title><rect x="83.2880%" y="276" width="0.1359%" height="15" fill="rgb(237,53,32)" fg:x="613" fg:w="1"/><text x="83.5380%" y="286.50"></text></g><g><title>depster`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.14%)</title><rect x="83.2880%" y="292" width="0.1359%" height="15" fill="rgb(233,25,53)" fg:x="613" fg:w="1"/><text x="83.5380%" y="302.50"></text></g><g><title>depster`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.14%)</title><rect x="83.2880%" y="308" width="0.1359%" height="15" fill="rgb(210,40,34)" fg:x="613" fg:w="1"/><text x="83.5380%" y="318.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.14%)</title><rect x="83.2880%" y="324" width="0.1359%" height="15" fill="rgb(241,220,44)" fg:x="613" fg:w="1"/><text x="83.5380%" y="334.50"></text></g><g><title>depster`regex::re_unicode::Regex::is_match_at (1 samples, 0.14%)</title><rect x="83.4239%" y="276" width="0.1359%" height="15" fill="rgb(235,28,35)" fg:x="614" fg:w="1"/><text x="83.6739%" y="286.50"></text></g><g><title>depster`&lt;regex_syntax::hir::literal::Literal as core::ops::deref::Deref&gt;::deref (1 samples, 0.14%)</title><rect x="83.4239%" y="292" width="0.1359%" height="15" fill="rgb(210,56,17)" fg:x="614" fg:w="1"/><text x="83.6739%" y="302.50"></text></g><g><title>depster`std::io::default_read_to_end (3 samples, 0.41%)</title><rect x="83.5598%" y="308" width="0.4076%" height="15" fill="rgb(224,130,29)" fg:x="615" fg:w="3"/><text x="83.8098%" y="318.50"></text></g><g><title>libsystem_kernel.dylib`__lseek (1 samples, 0.14%)</title><rect x="83.9674%" y="308" width="0.1359%" height="15" fill="rgb(235,212,8)" fg:x="618" fg:w="1"/><text x="84.2174%" y="318.50"></text></g><g><title>libsystem_kernel.dylib`fstat$INODE64 (3 samples, 0.41%)</title><rect x="84.1033%" y="308" width="0.4076%" height="15" fill="rgb(223,33,50)" fg:x="619" fg:w="3"/><text x="84.3533%" y="318.50"></text></g><g><title>depster`&lt;std::fs::File as std::io::Read&gt;::read_to_string (57 samples, 7.74%)</title><rect x="83.5598%" y="292" width="7.7446%" height="15" fill="rgb(219,149,13)" fg:x="615" fg:w="57"/><text x="83.8098%" y="302.50">depster`&lt;st..</text></g><g><title>libsystem_kernel.dylib`read (50 samples, 6.79%)</title><rect x="84.5109%" y="308" width="6.7935%" height="15" fill="rgb(250,156,29)" fg:x="622" fg:w="50"/><text x="84.7609%" y="318.50">libsystem..</text></g><g><title>depster`std::fs::read_to_string::inner (94 samples, 12.77%)</title><rect x="83.5598%" y="276" width="12.7717%" height="15" fill="rgb(216,193,19)" fg:x="615" fg:w="94"/><text x="83.8098%" y="286.50">depster`std::fs::re..</text></g><g><title>depster`std::fs::OpenOptions::_open (37 samples, 5.03%)</title><rect x="91.3043%" y="292" width="5.0272%" height="15" fill="rgb(216,135,14)" fg:x="672" fg:w="37"/><text x="91.5543%" y="302.50">depste..</text></g><g><title>libsystem_kernel.dylib`__open (36 samples, 4.89%)</title><rect x="91.4402%" y="308" width="4.8913%" height="15" fill="rgb(241,47,5)" fg:x="673" fg:w="36"/><text x="91.6902%" y="318.50">libsys..</text></g><g><title>depster`std::path::Path::_join (2 samples, 0.27%)</title><rect x="96.3315%" y="276" width="0.2717%" height="15" fill="rgb(233,42,35)" fg:x="709" fg:w="2"/><text x="96.5815%" y="286.50"></text></g><g><title>depster`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.14%)</title><rect x="96.4674%" y="292" width="0.1359%" height="15" fill="rgb(231,13,6)" fg:x="710" fg:w="1"/><text x="96.7174%" y="302.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (3 samples, 0.41%)</title><rect x="96.6033%" y="276" width="0.4076%" height="15" fill="rgb(207,181,40)" fg:x="711" fg:w="3"/><text x="96.8533%" y="286.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.14%)</title><rect x="97.0109%" y="276" width="0.1359%" height="15" fill="rgb(254,173,49)" fg:x="714" fg:w="1"/><text x="97.2609%" y="286.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.41%)</title><rect x="97.1467%" y="276" width="0.4076%" height="15" fill="rgb(221,1,38)" fg:x="715" fg:w="3"/><text x="97.3967%" y="286.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.27%)</title><rect x="97.2826%" y="292" width="0.2717%" height="15" fill="rgb(206,124,46)" fg:x="716" fg:w="2"/><text x="97.5326%" y="302.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.27%)</title><rect x="97.5543%" y="276" width="0.2717%" height="15" fill="rgb(249,21,11)" fg:x="718" fg:w="2"/><text x="97.8043%" y="286.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.14%)</title><rect x="98.7772%" y="292" width="0.1359%" height="15" fill="rgb(222,201,40)" fg:x="727" fg:w="1"/><text x="99.0272%" y="302.50"></text></g><g><title>depster`&lt;rayon::iter::filter_map::FilterMapFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (511 samples, 69.43%)</title><rect x="29.7554%" y="260" width="69.4293%" height="15" fill="rgb(235,61,29)" fg:x="219" fg:w="511"/><text x="30.0054%" y="270.50">depster`&lt;rayon::iter::filter_map::FilterMapFolder&lt;C,P&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume</text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 1.36%)</title><rect x="97.8261%" y="276" width="1.3587%" height="15" fill="rgb(219,207,3)" fg:x="720" fg:w="10"/><text x="98.0761%" y="286.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.27%)</title><rect x="98.9130%" y="292" width="0.2717%" height="15" fill="rgb(222,56,46)" fg:x="728" fg:w="2"/><text x="99.1630%" y="302.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.14%)</title><rect x="99.0489%" y="308" width="0.1359%" height="15" fill="rgb(239,76,54)" fg:x="729" fg:w="1"/><text x="99.2989%" y="318.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.14%)</title><rect x="99.1848%" y="260" width="0.1359%" height="15" fill="rgb(231,124,27)" fg:x="730" fg:w="1"/><text x="99.4348%" y="270.50"></text></g><g><title>depster`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (722 samples, 98.10%)</title><rect x="1.4946%" y="196" width="98.0978%" height="15" fill="rgb(249,195,6)" fg:x="11" fg:w="722"/><text x="1.7446%" y="206.50">depster`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>depster`std::panicking::try (700 samples, 95.11%)</title><rect x="4.4837%" y="212" width="95.1087%" height="15" fill="rgb(237,174,47)" fg:x="33" fg:w="700"/><text x="4.7337%" y="222.50">depster`std::panicking::try</text></g><g><title>depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer (517 samples, 70.24%)</title><rect x="29.3478%" y="228" width="70.2446%" height="15" fill="rgb(206,201,31)" fg:x="216" fg:w="517"/><text x="29.5978%" y="238.50">depster`rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>depster`&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (517 samples, 70.24%)</title><rect x="29.3478%" y="244" width="70.2446%" height="15" fill="rgb(231,57,52)" fg:x="216" fg:w="517"/><text x="29.5978%" y="254.50">depster`&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.27%)</title><rect x="99.3207%" y="260" width="0.2717%" height="15" fill="rgb(248,177,22)" fg:x="731" fg:w="2"/><text x="99.5707%" y="270.50"></text></g><g><title>depster`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.14%)</title><rect x="99.5924%" y="196" width="0.1359%" height="15" fill="rgb(215,211,37)" fg:x="733" fg:w="1"/><text x="99.8424%" y="206.50"></text></g><g><title>depster`std::thread::local::lazy::LazyKeyInner&lt;T&gt;::initialize (1 samples, 0.14%)</title><rect x="99.5924%" y="212" width="0.1359%" height="15" fill="rgb(241,128,51)" fg:x="733" fg:w="1"/><text x="99.8424%" y="222.50"></text></g><g><title>depster`once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.14%)</title><rect x="99.5924%" y="228" width="0.1359%" height="15" fill="rgb(227,165,31)" fg:x="733" fg:w="1"/><text x="99.8424%" y="238.50"></text></g><g><title>depster`once_cell::imp::initialize_or_wait (1 samples, 0.14%)</title><rect x="99.5924%" y="244" width="0.1359%" height="15" fill="rgb(228,167,24)" fg:x="733" fg:w="1"/><text x="99.8424%" y="254.50"></text></g><g><title>depster`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.14%)</title><rect x="99.5924%" y="260" width="0.1359%" height="15" fill="rgb(228,143,12)" fg:x="733" fg:w="1"/><text x="99.8424%" y="270.50"></text></g><g><title>depster`&lt;crossbeam_epoch::collector::Collector as core::default::Default&gt;::default (1 samples, 0.14%)</title><rect x="99.5924%" y="276" width="0.1359%" height="15" fill="rgb(249,149,8)" fg:x="733" fg:w="1"/><text x="99.8424%" y="286.50"></text></g><g><title>depster`core::ops::function::FnOnce::call_once{{vtable.shim}} (728 samples, 98.91%)</title><rect x="0.9511%" y="132" width="98.9130%" height="15" fill="rgb(243,35,44)" fg:x="7" fg:w="728"/><text x="1.2011%" y="142.50">depster`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>depster`std::sys_common::backtrace::__rust_begin_short_backtrace (728 samples, 98.91%)</title><rect x="0.9511%" y="148" width="98.9130%" height="15" fill="rgb(246,89,9)" fg:x="7" fg:w="728"/><text x="1.2011%" y="158.50">depster`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>depster`rayon_core::registry::ThreadBuilder::run (728 samples, 98.91%)</title><rect x="0.9511%" y="164" width="98.9130%" height="15" fill="rgb(233,213,13)" fg:x="7" fg:w="728"/><text x="1.2011%" y="174.50">depster`rayon_core::registry::ThreadBuilder::run</text></g><g><title>depster`rayon_core::registry::WorkerThread::wait_until_cold (728 samples, 98.91%)</title><rect x="0.9511%" y="180" width="98.9130%" height="15" fill="rgb(233,141,41)" fg:x="7" fg:w="728"/><text x="1.2011%" y="190.50">depster`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.14%)</title><rect x="99.7283%" y="196" width="0.1359%" height="15" fill="rgb(239,167,4)" fg:x="734" fg:w="1"/><text x="99.9783%" y="206.50"></text></g><g><title>all (736 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="736"/><text x="0.2500%" y="62.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (729 samples, 99.05%)</title><rect x="0.9511%" y="68" width="99.0489%" height="15" fill="rgb(219,88,35)" fg:x="7" fg:w="729"/><text x="1.2011%" y="78.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (729 samples, 99.05%)</title><rect x="0.9511%" y="84" width="99.0489%" height="15" fill="rgb(220,193,23)" fg:x="7" fg:w="729"/><text x="1.2011%" y="94.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_body (729 samples, 99.05%)</title><rect x="0.9511%" y="100" width="99.0489%" height="15" fill="rgb(230,90,52)" fg:x="7" fg:w="729"/><text x="1.2011%" y="110.50">libsystem_pthread.dylib`_pthread_body</text></g><g><title>depster`std::sys::unix::thread::Thread::new::thread_start (729 samples, 99.05%)</title><rect x="0.9511%" y="116" width="99.0489%" height="15" fill="rgb(252,106,19)" fg:x="7" fg:w="729"/><text x="1.2011%" y="126.50">depster`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>depster`std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.14%)</title><rect x="99.8641%" y="132" width="0.1359%" height="15" fill="rgb(206,74,20)" fg:x="735" fg:w="1"/><text x="100.1141%" y="142.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.14%)</title><rect x="99.8641%" y="148" width="0.1359%" height="15" fill="rgb(230,138,44)" fg:x="735" fg:w="1"/><text x="100.1141%" y="158.50"></text></g></svg></svg>